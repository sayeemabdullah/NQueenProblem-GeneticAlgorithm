# -*- coding: utf-8 -*-
"""NQueenProblem(Genetic Algorithm)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/sayeemabdullah/NQueenProblem-GeneticAlgorithm/blob/master/NQueenProblem(Genetic_Algorithm).ipynb
"""

import random

def getRandomValue(value):
  list = []
  for i in range(int(value)):
    n = random.randint(1,value)
    list.append (int(n))
  return list

def getPossibleNonAttackingPairs(value):
  n = 0
  for i in range(int(value)):
    n=n+i
  return n

def getAttackingPairs(list):
  length = len(list)
  attackingpairs = 0 
  for i in range(length):
    j = i+1;
    while j < length:
      rightCheck = (list[i]-i) - (list[j]-j)
      leftCheck = (list[i] + (i+1)) - (list[j] + (j+1))
      if list[i]==list[j] :
        attackingpairs+=1
      elif rightCheck==0 :
        attackingpairs+=1
      else:
        if leftCheck == 0:
          attackingpairs+=1         
      j+=1
  return attackingpairs

def getFitness(M,A,B,C):
  fitness =  (M+A+B+C)
  fitness = M / fitness
  return fitness

def swap(listA,listB,value):
  listTemp = []
  n = random.randint(1,value-1)
  for i in range(n):
    listTemp.append(listA[i])
    listA[i] = listB[i]
  for j in range(n):
    listB[j] = listTemp[j]
  return listA,listB

def mutation(list,value):
  n = random.randint(0,value-1)
  v = random.randint(1,value)
  list[n] = v;
  return list

def nQueen(value):
  listA = getRandomValue(value)
  listB = getRandomValue(value)
  listC = getRandomValue(value)
  listD = getRandomValue(value)
  PossibleNonAttackingPairs = getPossibleNonAttackingPairs(value)
  n = 1
  while True:
    AttackingPairsA = getAttackingPairs(listA)
    NonAttackingPairsA = PossibleNonAttackingPairs - AttackingPairsA
    AttackingPairsB = getAttackingPairs(listB)
    NonAttackingPairsB = PossibleNonAttackingPairs - AttackingPairsB
    AttackingPairsC = getAttackingPairs(listC)
    NonAttackingPairsC = PossibleNonAttackingPairs - AttackingPairsC
    AttackingPairsD = getAttackingPairs(listD)
    NonAttackingPairsD = PossibleNonAttackingPairs - AttackingPairsD

    if AttackingPairsA == 0 :
      print('Finally after '+ str(n) +' generations, we found the perfect match ðŸŽ‰')
      print('The result is '+ str(listA))
      break

    if AttackingPairsB == 0 :
      print('Finally after '+ str(n) +' generations, we found the perfect match ðŸŽ‰')
      print('The result is '+ str(listB))
      break

    if AttackingPairsC == 0 :
      print('Finally after '+ str(n) +' generations, we found the perfect match ðŸŽ‰')
      print('The result is '+ str(listC))
      break
    
    if AttackingPairsD == 0 :
      print('Finally after '+ str(n) +' generations, we found the perfect match ðŸŽ‰')
      print('The result is '+ str(listD))
      break

    FitnessA = getFitness(NonAttackingPairsA,NonAttackingPairsB,NonAttackingPairsC,NonAttackingPairsD)
    FitnessB = getFitness(NonAttackingPairsB,NonAttackingPairsA,NonAttackingPairsC,NonAttackingPairsD)
    FitnessC = getFitness(NonAttackingPairsC,NonAttackingPairsB,NonAttackingPairsA,NonAttackingPairsD)
    FitnessD = getFitness(NonAttackingPairsD,NonAttackingPairsB,NonAttackingPairsC,NonAttackingPairsA)
    listA,listB = swap(listA,listB,value)
    listC,listD = swap(listC,listD,value)
    listA = mutation(listA,value)
    listB = mutation(listB,value)
    listC = mutation(listC,value)
    listD = mutation(listD,value)
    n+=1

nQueen(8) #The value should be greater or equal to 4